networks:
    ntw_development:
        external: true

volumes:
    portainer-data:
        driver: local
        driver_opts:
            o: bind
            type: none
            device: ${PORTAINER_DATA}
    keycloak-data:
    pgdata-kc:
        external: true
    pgdata-lr:
        external: true
    pgdata-ak:
        external: true
    mysqldata-st:
        external: true
    mongo-st:
        external: true
    pgadmin:
        external: true
    redis_data:
        external: true
    influxdb-storage:
        external: true
    grafana-storage:
        external: true
    ubuntu-storage:
        external: true
    oracle-data:
        external: true
    oracle-backup:
        external: true
    minio-storage:
        external: true
    ollama: {}
    open-webui: {}

services:
    socket-proxy:
        image: tecnativa/docker-socket-proxy:latest
        container_name: server_socket_proxy
        restart: always
        security_opt:
            - no-new-privileges
        ports:
            - 2375:2375
        networks:
            - ntw_development
        environment:
            - TZ=$TZ
            - LOG_LEVEL=info
            - EVENTS=1
            - PING=1
            - VERSION=1
            - AUTH=0
            - SECRETS=0
            - POST=1
            - BUILD=0
            - COMMIT=0
            - CONFIGS=0
            - CONTAINERS=1
            - DISTRIBUTION=0
            - EXEC=0
            - IMAGES=1
            - INFO=1
            - NETWORKS=1
            - NODES=0
            - PLUGINS=0
            - SERVICES=1
            - SESSION=0
            - SWARM=0
            - SYSTEM=0
            - TASKS=1
            - VOLUMES=1
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro

    watchtower:
        image: containrrr/watchtower:latest
        container_name: services_watchtower
        restart: always
        security_opt:
            - no-new-privileges
        command:
            - "--host=tcp://socket-proxy:2375"
            - "--schedule=0 30 4 * * *"
            - "--debug"
            - "--stop-timeout=5m"
            - "--cleanup"
        networks:
            - ntw_development
        environment:
            - TZ=$TZ
        depends_on:
            - socket-proxy

    dozzle:
        image: amir20/dozzle:latest
        container_name: services_dozzle
        restart: always
        security_opt:
            - no-new-privileges:true
        networks:
            - ntw_development
        environment:
            - TZ=$TZ
            - DOZZLE_LEVEL=info
            - DOZZLE_TAILSIZE=500
            - DOZZLE_FILTER="status=running"
            - DOCKER_HOST=tcp://socket-proxy:2375
        depends_on:
            - socket-proxy
        labels:
            - "traefik.enable=true"
            - "traefik.docker.network=ntw_development"
            - "traefik.http.routers.dozzle.rule=Host(`logs.${DOMAIN_DEVELOPMENT}`)"
            - "traefik.http.routers.dozzle.tls=true"
            - "traefik.http.services.dozzle.loadbalancer.server.port=8080"

    traefik:
        image: traefik:v3.3.4
        container_name: server_traefik
        restart: always
        security_opt:
            - no-new-privileges:true
        ports:
            - 80:80
            - 443:443
            - 8080:8080
            - 8443:8443
            - 5432:5432
            - 15672:15672
            - 5672:5672
            - 16686:16686
            - 9090:9090
            - 3000:3000
            - 50000:50000
            - 5540:5540
            - 3001:8080
            - 9000:9000
            - 9001:9001
        networks:
            - ntw_development
        environment:
            - TZ=$TZ
        volumes:
            - /vagrant/shared/config/traefik/tls.yaml:/etc/traefik/dynamic.yaml:ro
            - /vagrant/shared/config/traefik/traefik.yaml:/etc/traefik/traefik.yaml:ro
            - /vagrant/shared/certs:/etc/certs:ro
        depends_on:
            - socket-proxy
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.server_traefik=true"
            - "traefik.http.routers.server_traefik.tls=true"
            - "traefik.http.services.server_traefik.loadbalancer.server.port=8080"

    portainer:
        image: portainer/portainer-ce:latest
        container_name: server_portainer
        restart: always
        security_opt:
            - no-new-privileges:true
        networks:
            - ntw_development
        environment:
            - TZ=$TZ
        volumes:
            - portainer-data:/data
            - /var/run/docker.sock:/var/run/docker.sock
        command: --admin-password "$$2y$$05$$nzBD8N0UnpSdAAbngQ4oAed3movf3R4wDO947B68IhHPtZ71YDkQ6" -H unix:///var/run/docker.sock # Portainer2024..
        depends_on:
            - socket-proxy
        labels:
            - "traefik.enable=true"
            - "traefik.docker.network=ntw_development"
            - "traefik.http.routers.portainer.rule=Host(`portainer.${DOMAIN_DEVELOPMENT}`)"
            - "traefik.http.routers.portainer.tls=true"
            - "traefik.http.services.portainer.loadbalancer.server.port=9000"

    whoami:
        image: containous/whoami
        container_name: server_whoami
        security_opt:
            - no-new-privileges:true
        networks:
            - ntw_development
        environment:
            - TZ=$TZ
        labels:
            - "traefik.enable=true"
            - "traefik.docker.network=ntw_development"
            - "traefik.http.routers.whoami.rule=Host(`whoami.${DOMAIN_DEVELOPMENT}`)"
            - "traefik.http.routers.whoami.tls=true"

    postgres-kc:
        image: postgres:latest
        container_name: server_postgres_kc
        restart: always
        security_opt:
            - no-new-privileges:true
        networks:
            - ntw_development
        environment:
            - TZ=$TZ
            - POSTGRES_DB=${KC_DB_NAME}
            - POSTGRES_USER=${KC_DB_USERNAME}
            - POSTGRES_PASSWORD=${KC_DB_PASSWORD}
            - PGDATA=/var/lib/postgresql/data
        volumes:
            - pgdata-kc:/var/lib/postgresql/data
        healthcheck:
            test: "exit 0"
        labels:
            - "traefik.enable=true"
            - "traefik.docker.network=ntw_development"
            - "traefik.tcp.routers.postgres-kc.entrypoints=postgres"
            - "traefik.tcp.routers.postgres-kc.rule=HostSNI(`keycloak.${DOMAIN_DEVELOPMENT_POSTGRES}`)"
            - "traefik.tcp.routers.postgres-kc.tls=true"
            - "traefik.tcp.routers.postgres-kc.tls.passthrough=false"
            - "traefik.tcp.services.postgres-kc.loadbalancer.server.port=5432"

    postgres-lr:
        image: postgres:latest
        container_name: server_postgres_lr
        restart: always
        security_opt:
            - no-new-privileges:true
        networks:
            - ntw_development
        environment:
            - TZ=$TZ
            - POSTGRES_DB=${LEARNING_DATABASE_NAME}
            - POSTGRES_USER=${LEARNING_DATABASE_USERNAME}
            - POSTGRES_PASSWORD=${LEARNING_DATABASE_PASSWORD}
            - PGDATA=/var/lib/postgresql/data
        volumes:
            - pgdata-lr:/var/lib/postgresql/data
        healthcheck:
            test: "exit 0"
        labels:
            - "traefik.enable=true"
            - "traefik.docker.network=ntw_development"
            - "traefik.tcp.routers.postgres-lr.entrypoints=postgres"
            - "traefik.tcp.routers.postgres-lr.rule=HostSNI(`learning.${DOMAIN_DEVELOPMENT_POSTGRES}`)"
            - "traefik.tcp.routers.postgres-lr.tls=true"
            - "traefik.tcp.routers.postgres-lr.tls.passthrough=false"
            - "traefik.tcp.services.postgres-lr.loadbalancer.server.port=5432"

    postgres-ak:
        image: postgres:latest
        container_name: server_postgres_ak
        restart: always
        security_opt:
            - no-new-privileges:true
        networks:
            - ntw_development
        environment:
            - TZ=$TZ
            - POSTGRES_DB=${AUTHENTIK_DATABASE_NAME}
            - POSTGRES_USER=${AUTHENTIK_DATABASE_USERNAME}
            - POSTGRES_PASSWORD=${AUTHENTIK_DATABASE_PASSWORD}
            - PGDATA=/var/lib/postgresql/data
        volumes:
            - pgdata-ak:/var/lib/postgresql/data
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
            start_period: 20s
            interval: 30s
            retries: 5
            timeout: 5s
        labels:
            - "traefik.enable=true"
            - "traefik.docker.network=ntw_development"
            - "traefik.tcp.routers.postgres-ak.entrypoints=postgres"
            - "traefik.tcp.routers.postgres-ak.rule=HostSNI(`authentik.${DOMAIN_DEVELOPMENT_POSTGRES}`)"
            - "traefik.tcp.routers.postgres-ak.tls=true"
            - "traefik.tcp.routers.postgres-ak.tls.passthrough=false"
            - "traefik.tcp.services.postgres-ak.loadbalancer.server.port=5432"

    mysql-st:
        image: mysql:9.2.0
        container_name: server_mysql_st
        restart: unless-stopped
        security_opt:
            - no-new-privileges:true
        ports:
            - 3306:3306
        networks:
            - ntw_development
        environment:
            - TZ=$TZ
            - MYSQL_DATABASE=${STUDY_DATABASE_NAME}
            - MYSQL_USER=${STUDY_DATABASE_USERNAME}
            - MYSQL_PASSWORD=${STUDY_DATABASE_PASSWORD}
            - MYSQL_ROOT_PASSWORD=${STUDY_DATABASE_ROOT_PASSWORD}
            - MYSQL_ROOT_HOST='%'
        volumes:
            - mysqldata-st:/var/lib/mysql
        healthcheck:
            test: ["CMD", "mysqladmin", "ping", "--silent"]
            start_period: 5s
            interval: 5s
            timeout: 5s
            retries: 3

    oracle-st:
        image: gvenzl/oracle-xe:latest
        container_name: server_oracle_st
        restart: unless-stopped
        security_opt:
            - no-new-privileges:true
        networks:
            - ntw_development
        ports:
            - 1521:1521
        environment:
            - ORACLE_ALLOW_REMOTE=true
            - ORACLE_PASSWORD=Oracle2025..
        volumes:
        - oracle-data:/opt/oracle/oradata

    mongo:
        image: mongo:latest
        container_name: server_mongo_st
        restart: unless-stopped
        security_opt:
            - no-new-privileges:true
        networks:
            - ntw_development
        ports:
            - 27017:27017
        environment:
            - TZ=$TZ
            - MONGO_INITDB_DATABASE=${MONGO_DATABASE_NAME}
            - MONGO_INITDB_ROOT_USERNAME=${MONGO_DATABASE_USERNAME}
            - MONGO_INITDB_ROOT_PASSWORD=${MONGO_DATABASE_PASSWORD}
        volumes:
            - mongo-st:/data/db

#    redis-node-1:
#        image: redis:latest
#        container_name: server_redis_node_1
#        restart: unless-stopped
#        security_opt:
#            - no-new-privileges:true
#        ports:
#            - 7000:7000
#        networks:
#            - ntw_development
#        hostname: redis-node-1
#        volumes:
#            - ./redis/redis-7000.conf:/redis/redis-7000.conf
#        command: /bin/sh -c "redis-server /redis/redis-7000.conf --requirepass $$REDIS_HOST_PASSWORD"
#        env_file:
#            - .env

#    redis-node-2:
#        image: redis:latest
#        container_name: server_redis_node_2
#        restart: unless-stopped
#        security_opt:
#            - no-new-privileges:true
#        ports:
#            - 7001:7001
#        networks:
#            - ntw_development
#        hostname: redis-node-2
#        volumes:
#            - ./redis/redis-7001.conf:/redis/redis-7001.conf
#        command: /bin/sh -c "redis-server /redis/redis-7001.conf --requirepass $$REDIS_HOST_PASSWORD"
#        env_file:
#            - .env

#    redis-node-3:
#        image: redis:latest
#        container_name: server_redis_node_3
#        restart: unless-stopped
#        security_opt:
#            - no-new-privileges:true
#        ports:
#            - 7002:7002
#        networks:
#            - ntw_development
#        hostname: redis-node-3
#        volumes:
#            - ./redis/redis-7002.conf:/redis/redis-7002.conf
#        command: /bin/sh -c "redis-server /redis/redis-7002.conf --requirepass $$REDIS_HOST_PASSWORD"
#        env_file:
#            - .env

#    redis-node-4:
#        image: redis:latest
#        container_name: server_redis_node_4
#        restart: unless-stopped
#        security_opt:
#            - no-new-privileges:true
#        ports:
#            - 7003:7003
#        networks:
#            - ntw_development
#        hostname: redis-node-4
#        volumes:
#            - ./redis/redis-7003.conf:/redis/redis-7003.conf
#        command: /bin/sh -c "redis-server /redis/redis-7003.conf --requirepass $$REDIS_HOST_PASSWORD"
#        env_file:
#            - .env

#    redis-node-5:
#        image: redis:latest
#        container_name: server_redis_node_5
#        restart: unless-stopped
#        security_opt:
#            - no-new-privileges:true
#        ports:
#            - 7004:7004
#        networks:
#            - ntw_development
#        hostname: redis-node-5
#        volumes:
#            - ./redis/redis-7004.conf:/redis/redis-7004.conf
#        command: /bin/sh -c "redis-server /redis/redis-7004.conf --requirepass $$REDIS_HOST_PASSWORD"
#        env_file:
#            - .env

#   redis-node-6:
#        image: redis:latest
#        container_name: server_redis_node_6
#        restart: unless-stopped
#        security_opt:
#            - no-new-privileges:true
#        ports:
#            - 7005:7005
#        networks:
#            - ntw_development
#        hostname: redis-node-6
#        volumes:
#            - ./redis/redis-7005.conf:/redis/redis-7005.conf
#        command: /bin/sh -c "redis-server /redis/redis-7005.conf --requirepass $$REDIS_HOST_PASSWORD"
#        env_file:
#            - .env

#    redis-ak:
#        image: docker.io/library/redis:alpine
#        container_name: server_redis_authentik
#        restart: unless-stopped
#        security_opt:
#            - no-new-privileges:true
#        networks:
#            - ntw_development
#        command: --save 60 1 --loglevel warning
#        healthcheck:
#            test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
#            start_period: 20s
#            interval: 30s
#            retries: 5
#            timeout: 3s
#        volumes:
#        - redis_data:/data

#    redis-cluster-creator:
#        image: redis:latest
#        container_name: server_redis_creator
#        ports:
#            - 6999:6999
#        networks:
#            - ntw_development
#        command: redis-cli -h server_redis_node_1 -p 7000 -a "${REDIS_HOST_PASSWORD}" --cluster create redis-node-1:7000 redis-node-2:7001 redis-node-3:7002 #redis-node-4:7003 redis-node-5:7004 redis-node-6:7005 --cluster-replicas 1 --cluster-yes
#        env_file:
#            - .env
#        depends_on:
#            - redis-node-1
#            - redis-node-2
#            - redis-node-3
#            - redis-node-4
#            - redis-node-5
#            - redis-node-6

#    redis-insight:
#        image: redislabs/redisinsight:latest
#        container_name: server_redis_insight
#        restart: always
#        security_opt:
#            - no-new-privileges:true
#        networks:
#            - ntw_development
#        environment:
#            - TZ=$TZ
#        volumes:
#            - ./redis-insight:/db
#        depends_on:
#            - redis-cluster-creator
#        labels:
#            - "traefik.enable=true"
#            - "traefik.docker.network=ntw_development"
#            - "traefik.http.routers.redis-insight.rule=Host(`insight.${DOMAIN_DEVELOPMENT}`)"
#            - "traefik.http.routers.redis-insight.tls=true"
#            - "traefik.http.services.redis-insight.loadbalancer.server.port=5540"

    pgadmin:
        image: dpage/pgadmin4
        container_name: server_pgadmin
        restart: unless-stopped
        security_opt:
            - no-new-privileges:true
        networks:
            - ntw_development
        environment:
            - TZ=$TZ
            - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
            - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
            - PGADMIN_CONFIG_SERVER_MODE=${PGADMIN_CONFIG_SERVER_MODE}
        volumes:
            - pgadmin:/var/lib/pgadmin
        labels:
            - "traefik.enable=true"
            - "traefik.docker.network=ntw_development"
            - "traefik.http.routers.pgadmin.rule=Host(`pgadmin.${DOMAIN_DEVELOPMENT}`)"
            - "traefik.http.routers.pgadmin.tls=true"

    mongo-express:
        image: mongo-express:latest
        container_name: server_mongo_express
        restart: always
        security_opt:
            - no-new-privileges:true
        networks:
            - ntw_development
        environment:
            - TZ=$TZ
            - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_ROOT_USER}
            - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_ROOT_PASSWORD}
            - ME_CONFIG_BASICAUTH_USERNAME=${MONGOEXPRESS_LOGIN}
            - ME_CONFIG_BASICAUTH_PASSWORD=${MONGOEXPRESS_PASSWORD}
            - ME_CONFIG_MONGODB_URL=mongodb://${MONGO_DATABASE_USERNAME}:${MONGO_DATABASE_PASSWORD}@mongo:27017/
        labels:
            - "traefik.enable=true"
            - "traefik.docker.network=ntw_development"
            - "traefik.http.routers.mongo-express.rule=Host(`me.${DOMAIN_DEVELOPMENT}`)"
            - "traefik.http.routers.mongo-express.tls=true"
            - "traefik.http.services.mongo-express.loadbalancer.server.port=8081"
        depends_on:
            - mongo

    payara:
        image: payara/server-full
        container_name: server_payara
        restart: always
        security_opt:
            - no-new-privileges:true
        networks:
            - ntw_development
        ports:
            - "8082:8080"
            - "8181:8181"
            - "4848:4848"
            - "9009:9009"
        volumes:
            - ./deployments:/opt/payara/deployments
        environment:
            - TZ=$TZ
            - ADMIN_USER=${PAYARA_ADMIN_USERNAME}
            - ADMIN_PASSWORD=${PAYARA_ADMIN_PASSWORD}

    rabbit:
        image: rabbitmq:3-management
        container_name: server_rabbit
        restart: always
        security_opt:
            - no-new-privileges:true
        networks:
            - ntw_development
        environment:
            - TZ=$TZ
            - RABBITMQ_ERLANG_COOKIE=${RABBITMQ_ERLANG_COOKIE}
            - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
            - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
            - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_DEFAULT_VHOST}
        volumes:
            - ./rabbit/enabled_plugins:/etc/rabbitmq/enabled_plugins
        labels:
            - "NAME=rabbitmq"
            - "traefik.enable=true"
            - "traefik.docker.network=ntw_development"
            - "traefik.http.routers.rabbit.rule=Host(`rabbit.${DOMAIN_DEVELOPMENT}`)"
            - "traefik.http.routers.rabbit.tls=true"
            - "traefik.http.services.rabbit.loadbalancer.server.port=15672"

    keycloak:
        image: quay.io/keycloak/keycloak:latest
        container_name: server_keycloak
        entrypoint: /opt/keycloak/bin/kc.sh start
        restart: always
        security_opt:
            - no-new-privileges:true
        networks:
            - ntw_development
        environment:
            - TZ=$TZ
            - KC_HOSTNAME=https://keycloak.${DOMAIN_DEVELOPMENT}
            - KC_PROXY_ADDRESS_FORWARDING=true
            - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN}
            - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
            - KC_HOSTNAME_STRICT=false
            - KC_HOSTNAME_STRICT_HTTPS=false
            - KC_HTTP_ENABLED=true
            - KC_DB=${KC_DB}
            - KC_DB_URL=jdbc:postgresql://server_postgres_kc:${KC_DB_PORT}/${KC_DB_NAME}
            - KC_DB_USERNAME=${KC_DB_USERNAME}
            - KC_DB_PASSWORD=${KC_DB_PASSWORD}
            - KC_PROXY_HEADERS=${KC_PROXY_HEADERS}
            - KEYCLOAK_LOGLEVEL=DEBUG
            - ROOT_LOGLEVEL=DEBUG
            - KC_METRICS_ENABLED=true
            - KC_HEALTH_ENABLED=true
            - KC_HOSTNAME_PORT=8080
        depends_on:
            - postgres-kc
        healthcheck:
            test: timeout 10s bash -c ':> /dev/tcp/127.0.0.1/8080' || exit 1
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 90s
        labels:
            - "traefik.enable=true"
            - "traefik.docker.network=ntw_development"
            - "traefik.http.routers.keycloak.entrypoints=https"
            - "traefik.http.routers.keycloak.rule=Host(`keycloak.${DOMAIN_DEVELOPMENT}`)"
            - "traefik.http.routers.keycloak.tls=true"
            - "traefik.http.services.keycloak.loadbalancer.server.port=8080"

    openldap:
        image: osixia/openldap:latest
        container_name: server_ldap
        restart: always
        security_opt:
            - no-new-privileges:true
        networks:
            - ntw_development
        environment:
            - TZ=$TZ
            - LDAP_ORGANISATION="Developer Inc."
            - LDAP_DOMAIN=${LDAP_DOMAIN}
            - LDAP_ADMIN_USERNAME=${LDAP_ADMIN_USERNAME}
            - LDAP_ADMIN_PASSWORD=${LDAP_ADMIN_PASSWORD}
            - LDAP_CONFIG_PASSWORD=${LDAP_CONFIG_PASSWORD}
            - "LDAP_BASE_DN=dc=developer,dc=dck"
            - LDAP_READONLY_USER="false"
            - LDAP_TLS="false"
            - LDAP_RFC2307BIS_SCHEMA="false"
            - LDAP_SEED_INTERNAL_LDIF_PATH=/resources/
        volumes:
            - ./ldap/embedded-ldap.ldif:/resources/embedded-ldap.ldif

    ldapadmin:
        image: osixia/phpldapadmin:latest
        container_name: server_ldapadmin
        restart: always
        security_opt:
            - no-new-privileges:true
        networks:
            - ntw_development
        environment:
            - TZ=$TZ
            - PHPLDAPADMIN_LDAP_HOSTS=server_ldap
            - PHPLDAPADMIN_HTTPS=false
        depends_on:
            - openldap
        labels:
            - "traefik.enable=true"
            - "traefik.docker.network=ntw_development"
            - "traefik.http.routers.ldapadmin.rule=Host(`ldap.${DOMAIN_DEVELOPMENT}`)"
            - "traefik.http.routers.ldapadmin.tls=true"
            - "traefik.http.services.ldapadmin.loadbalancer.server.port=80"

    jaeger:
        image: jaegertracing/all-in-one:${JAEGER_IMAGE_TAG:-latest}
        container_name: server_jaeger
        restart: always
        security_opt:
            - no-new-privileges:true
        networks:
            - ntw_development
        environment:
            - TZ=$TZ
            - METRICS_STORAGE_TYPE=prometheus
            - PROMETHEUS_SERVER_URL=http://prometheus:9090
            - PROMETHEUS_QUERY_SUPPORT_SPANMETRICS_CONNECTOR=${PROMETHEUS_QUERY_SUPPORT_SPANMETRICS_CONNECTOR:-true}
            - PROMETHEUS_QUERY_NAMESPACE=${PROMETHEUS_QUERY_NAMESPACE:-}
            - PROMETHEUS_QUERY_DURATION_UNIT=${PROMETHEUS_QUERY_DURATION_UNIT:-}
            - PROMETHEUS_QUERY_NORMALIZE_CALLS=true
            - PROMETHEUS_QUERY_NORMALIZE_DURATION=true
        volumes:
            - ./tracing/jaeger-ui.json:/etc/jaeger/jaeger-ui.json
        command: --query.ui-config /etc/jaeger/jaeger-ui.json
        labels:
            - "traefik.enable=true"
            - "traefik.docker.network=ntw_development"
            - "traefik.http.routers.jaeger.rule=Host(`jaeger.${DOMAIN_DEVELOPMENT}`)"
            - "traefik.http.routers.jaeger.tls=true"
            - "traefik.http.services.jaeger.loadbalancer.server.port=16686"

    otel:
        image: otel/opentelemetry-collector-contrib:${OTEL_IMAGE_TAG:-latest}
        container_name: server_otel
        restart: always
        security_opt:
            - no-new-privileges:true
        networks:
            - ntw_development
        environment:
            - TZ=$TZ
        volumes:
            - ${OTEL_CONFIG_SRC:-./otel/otel-collector-config-connector.yml}:/etc/otelcol/otel-collector-config.yml
        command: --config /etc/otelcol/otel-collector-config.yml
        depends_on:
            - jaeger

    prometheus:
        image: prom/prometheus:latest
        container_name: server_prometheus
        restart: always
        security_opt:
            - no-new-privileges:true
        networks:
            - ntw_development
        environment:
            - TZ=$TZ
        volumes:
            - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
        labels:
            - "traefik.enable=true"
            - "traefik.docker.network=ntw_development"
            - "traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN_DEVELOPMENT}`)"
            - "traefik.http.routers.prometheus.tls=true"
            - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

    influxdb:
        image: influxdb:latest
        container_name: server_influxdb
        restart: always
        security_opt:
            - no-new-privileges:true
        networks:
            - ntw_development
        ports:
            - "8086:8086"
        volumes:
            - influxdb-storage:/var/lib/influxdb
        environment:
            - TZ=$TZ
            - DOCKER_INFLUXDB_INIT_MODE=setup
            - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_USERNAME}
            - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_PASSWORD}
            - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_ORG}
            - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_BUCKET}
            - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_ADMIN_TOKEN}

    grafana:
        image: grafana/grafana:latest
        container_name: server_grafana
        restart: always
        security_opt:
            - no-new-privileges:true
        networks:
            - ntw_development
        environment:
            - TZ=$TZ
            - GF_SECURITY_ADMIN_USER=${GRAFANA_USERNAME}
            - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
            - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_ORG}
            - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_BUCKET}
            - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_ADMIN_TOKEN}
        volumes:
            - grafana-storage:/var/lib/grafana
            - ./grafana/:/etc/grafana/provisioning/
        depends_on:
            - influxdb
        labels:
            - "traefik.enable=true"
            - "traefik.docker.network=ntw_development"
            - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN_DEVELOPMENT}`)"
            - "traefik.http.routers.grafana.tls=true"
            - "traefik.http.services.grafana.loadbalancer.server.port=3000"

    localstack:
        image: localstack/localstack
        container_name: "${LOCALSTACK_DOCKER_NAME:-server_localstack}"
        restart: always
        security_opt:
            - no-new-privileges:true
        networks:
            - ntw_development
        ports:
            - "127.0.0.1:4566:4566"
            - "127.0.0.1:4510-4559:4510-4559"
        environment:
            - TZ=$TZ
            - DEBUG=${DEBUG:-0}
        volumes:
            - "${LOCALSTACK_VOLUME_DIR:-./volume}:/var/lib/localstack"
        depends_on:
            - socket-proxy

    jenkins:
        image: jenkins/jenkins:lts
        container_name: server_jenkins
        restart: always
        security_opt:
            - no-new-privileges:true
        networks:
            - ntw_development
        environment:
            - TZ=$TZ
        privileged: true
        user: root
        volumes:
            - ~/jenkins_home:/var/jenkins_home
        depends_on:
            - socket-proxy
        labels:
            - "traefik.enable=true"
            - "traefik.docker.network=ntw_development"
            - "traefik.http.routers.jenkins.rule=Host(`jenkins.${DOMAIN_DEVELOPMENT}`)"
            - "traefik.http.routers.jenkins.tls=true"
            - "traefik.http.services.jenkins.loadbalancer.server.port=8080"

    ubuntu:
        image: ubuntu:latest
        container_name: server_ubuntu_lab
        restart: always
        security_opt:
            - no-new-privileges:true
        networks:
            - ntw_development
        environment:
            - TZ=$TZ
        privileged: true
        user: root
        volumes:
            - ubuntu-storage:/mnt/data
        depends_on:
            - socket-proxy
        tty: true

    minio:
        image: quay.io/minio/minio:latest
        container_name: server_minio
        restart: always
        security_opt:
            - no-new-privileges:true
        networks:
            - ntw_development
        volumes:
            - minio-storage:/data
        environment:
            - TZ=$TZ
            - MINIO_ROOT_USER=${MINIO_USERNAME}
            - MINIO_ROOT_PASSWORD=${MINIO_PASSWORD}
        command: server --console-address ":9001" /data
        labels:
            - "traefik.enable=true"
            - "traefik.docker.network=ntw_development"

            - "traefik.http.routers.minio-api.rule=Host(`minio-api.${DOMAIN_DEVELOPMENT}`)"
            - "traefik.http.routers.minio-api.tls=true"
            - "traefik.http.routers.minio-api.service=svc_api"
            - "traefik.http.services.svc_api.loadbalancer.server.port=9000" # For connecting to Minio API

            - "traefik.http.routers.minio-web.rule=Host(`minio.${DOMAIN_DEVELOPMENT}`)"
            - "traefik.http.routers.minio-web.tls=true"
            - "traefik.http.routers.minio-web.service=svc_web"            
            - "traefik.http.services.svc_web.loadbalancer.server.port=9001" # For viewing Minio Web Console

#    ollama:
#        image: ollama/ollama:latest
#        container_name: server_ollama
#        restart: unless-stopped
#        security_opt:
#            - no-new-privileges:true
#        networks:
#            - ntw_development
#        environment:
#            - TZ=$TZ
#        ports:
#            - 11434:11434
#        volumes:
#            - ollama:/root/.ollama
#        depends_on:
#            - socket-proxy              
#        tty: true
#        healthcheck:
#            test: ollama --version || exit 1       

#    open-webui:
#        image: ghcr.io/open-webui/open-webui:main
#        container_name: server_open_webui
#        restart: unless-stopped
#        security_opt:
#            - no-new-privileges:true
#        networks:
#            - ntw_development
#        environment:
#            - TZ=$TZ
#            - 'OLLAMA_BASE_URL=http://ollama:11434'
#            - 'WEBUI_SECRET_KEY='
#        depends_on:
#            - socket-proxy 
#            - ollama
#        #ports:
#        #    - 3000:8080
#        volumes:
#            - open-webui:/app/backend/data            
#        extra_hosts:
#            - host.docker.internal:host-gateway
#        labels:
#            - "traefik.enable=true"
#            - "traefik.docker.network=ntw_development"
#            - "traefik.http.routers.ollama.entrypoints=https"
#            - "traefik.http.routers.ollama.rule=Host(`ollama.${DOMAIN_DEVELOPMENT}`)"
#            - "traefik.http.routers.ollama.tls=true"
#            - "traefik.http.services.ollama.loadbalancer.server.port=8080"
