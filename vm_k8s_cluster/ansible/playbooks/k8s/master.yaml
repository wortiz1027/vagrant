---
- hosts: all
  gather_facts: yes
  become: yes

  tasks:
    - name: Perform a dist-upgrade.
      ansible.builtin.apt:
        upgrade: dist
        update_cache: yes

    - name: Check if a reboot is required.
      ansible.builtin.stat:
        path: /var/run/reboot-required
        get_checksum: no
      register: reboot_required_file

    - name: Reboot the server (if required).
      ansible.builtin.reboot:
      when: reboot_required_file.stat.exists == true

    - name: Remove dependencies that are no longer required.
      ansible.builtin.apt:
        autoremove: yes

    - name: Install necessary packages
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - apt-transport-https
        - ca-certificates
        - curl
        - software-properties-common 
        - gnupg2
        - net-tools

    - name: Add cri-o apt key
      apt_key: 
        url: https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:{{ crio_version }}/{{ os_version }}/Release.key
        state: present

    - name: Add cri-o apt key
      apt_key: 
        url: https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/{{ os_version }}/Release.key
        state: present

    - name: Add cri-o repo
      apt_repository:
        repo: deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/{{ os_version }}/ /
        state: present
        filename: devel:kubic:libcontainers:stable.list

    - name: Add cri-o repo
      apt_repository:
        repo: deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{ crio_version }}/{{ os_version }}/ /
        state: present
        filename: devel:kubic:libcontainers:stable:cri-o:{{ crio_version }}.list

    - name: Update apt
      apt:
        update_cache: yes

    - name: Install packages
      apt:
        name: 
          - cri-o
          - cri-o-runc
          - cri-tools
        state: present
        update_cache: true
  
    - name: Start cri-o
      systemd:
        state: started
        daemon_reload: yes
        name: crio

    - name: Enable cri-o on boot
      systemd:
        enabled: yes
        name: crio

    - name: Remove swapfile from /etc/fstab
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - swap
        - none

    - name: Disable swap
      command: swapoff -a
      when: ansible_swaptotal_mb > 0

    - name: Add an apt signing key for Kubernetes
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Adding apt repository for Kubernetes
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: kubernetes.list
    - name: Install Kubernetes binaries
      apt: 
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - kubelet={{ k8s_version }}-00
          - kubeadm={{ k8s_version }}-00
          - kubectl={{ k8s_version }}-00

    - name: Configure crio
      blockinfile:
        create: true
        path: /etc/modules-load.d/crio.conf
        block: |
          overlay
          br_netfilter

    - name: Enable kernel modules
      shell: |
        modprobe overlay
        modprobe br_netfilter

    - name: Configure IP forwarding and iptables
      blockinfile:
        create: true
        path: /etc/sysctl.conf
        block: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.ipv4.ip_forward                 = 1
          net.bridge.bridge-nf-call-ip6tables = 1

    - name: Persist changes
      command: sysctl -p

    - name: Get IP eth1 addr
      shell: ifconfig eth1 | grep 'inet' | cut -d{{':'}} -f2 | awk '{ print $2 }'
      register: output

    - name: Configure kubelet
      lineinfile:
        path: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
        line: Environment="KUBELET_EXTRA_ARGS=--node-ip={{ k8s_master_node_ip }}"

    - name: Initialize the Kubernetes cluster using kubeadm
      command: kubeadm init --apiserver-advertise-address="{{ k8s_master_apiserver_advertise_address }}" --apiserver-cert-extra-sans="{{ k8s_master_apiserver_cert_extra_sans }}" --pod-network-cidr={{ k8s_master_pod_network_cird }}
      
    - name: Create kube directory
      file:
        path: /home/vagrant/.kube
        state: directory

    - name: Setup kubeconfig for vagrant user
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/vagrant/.kube/config
        remote_src: yes
        owner: vagrant
        group: vagrant
        mode: '0644'

    - name: Download calico.conf
      get_url:
        url: https://raw.githubusercontent.com/projectcalico/calico/v3.27.0/manifests/calico.yaml
        #url: https://docs.projectcalico.org/manifests/calico.yaml
        dest: /home/vagrant/calico.yaml

    - name: Add pod config to calico.yaml
      lineinfile:
        dest: /home/vagrant/calico.yaml
        regexp: '^\s{12}#\s*- name: CALICO_IPV4POOL_CIDR.*$'
        line: '            - name: CALICO_IPV4POOL_CIDR'

    - name: Add pod config to calico.yaml
      lineinfile:
        dest: /home/vagrant/calico.yaml
        regexp: '^\s{12}#\s*value: "192.168.0.0\/16".*$'
        line: '              value: "192.168.0.0/16"'

    - name: Install calico CNI
      become: false
      command: kubectl create -f /home/vagrant/calico.yaml

    - name: Generate join command
      command: kubeadm token create --print-join-command
      register: join_command

    - name: Copy join command to local file
      become: false
      local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"
