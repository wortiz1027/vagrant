#######################################################################
#
# Docker Compose With a Complete Development Environment
# @Author : Wilman Ortiz
# @Copyright (c) developer.io
# @CreateAt : 11-02-2024
#
#######################################################################
version: "3.9"

networks:
  ntw_development:
    external: true

volumes:
  portainer-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: $PORTAINER_DATA
  keycloak-data:
  pgdata-kc:
    external: true

services:
  socket-proxy:
    image: tecnativa/docker-socket-proxy:latest
    container_name: services_socket_proxy
    restart: always
    security_opt:
      - no-new-privileges
    ports:
      - 2375:2375
    networks:
      - ntw_development
    environment:
      - LOG_LEVEL=info
      - EVENTS=1
      - PING=1
      - VERSION=1
      - AUTH=0
      - SECRETS=0
      - POST=1
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1
      - DISTRIBUTION=0
      - EXEC=0
      - IMAGES=1
      - INFO=1
      - NETWORKS=1
      - NODES=0
      - PLUGINS=0
      - SERVICES=1
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      - TASKS=1
      - VOLUMES=1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
  watchtower:
    image: containrrr/watchtower:latest
    container_name: services_watchtower
    restart: always
    depends_on:
      - socket-proxy
    command:
      - '--host=tcp://socket-proxy:2375'
      - '--schedule=0 30 4 * * *'
      - '--debug'
      - '--stop-timeout=5m'
      - '--cleanup'
    security_opt:
      - no-new-privileges
    networks:
      - ntw_development
  dozzle:
    image: amir20/dozzle:latest
    container_name: services_dozzle
    restart: always
    depends_on:
      - socket-proxy
    networks:
      - ntw_development
    environment:
      DOZZLE_LEVEL: info
      DOZZLE_TAILSIZE: 500
      DOZZLE_FILTER: "status=running"
      DOCKER_HOST: tcp://socket-proxy:2375
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=ntw_development"
      - "traefik.http.routers.dozzle.rule=Host(`logs.${DOMAIN_DEVELOPMENT}`)"
      - "traefik.http.routers.dozzle.tls=true"
      - "traefik.http.services.dozzle.loadbalancer.server.port=8080"
  traefik:
    image: traefik:v3.0.0-beta5
    container_name: server_traefik
    restart: always
    security_opt:
      - no-new-privileges:true
    ports:
      - 80:80
      - 443:443
      - 8080:8080
      - 3306:3306
      - 5432:5432
    networks:
      - ntw_development
    environment:
      - TZ=$TZ      
    volumes:
      - /vagrant/shared/config/traefik/tls.yaml:/etc/traefik/dynamic.yaml:ro
      - /vagrant/shared/config/traefik/traefik.yaml:/etc/traefik/traefik.yaml:ro
      - /vagrant/shared/certs:/etc/certs:ro
    depends_on:
      - socket-proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.server_traefik=true"
      - "traefik.http.routers.server_traefik.tls=true"
      - "traefik.http.services.server_traefik.loadbalancer.server.port=8080"
  whoami:
    image: containous/whoami
    container_name: server_whoami
    security_opt:
      - no-new-privileges:true
    networks:
      - ntw_development
    environment:
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=ntw_development"
      - "traefik.http.routers.whoami.rule=Host(`whoami$.{DOMAIN_DEVELOPMENT}`)"
      - "traefik.http.routers.whoami.tls=true"
  portainer:    
    image: portainer/portainer-ce:latest
    container_name: server_portainer
    restart: always
    security_opt:
      - no-new-privileges:true
    networks:
      - ntw_development
    environment:
      - TZ=$TZ
    volumes:
      - portainer-data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    command: --admin-password "$$2y$$05$$nzBD8N0UnpSdAAbngQ4oAed3movf3R4wDO947B68IhHPtZ71YDkQ6" -H unix:///var/run/docker.sock # Portainer2024..
    depends_on:
      - socket-proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=ntw_development"
      - "traefik.http.routers.portainer.rule=Host(`portainer.${DOMAIN_DEVELOPMENT}`)"
      - "traefik.http.routers.portainer.tls=true"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
  postgres-kc:
    image: postgres:latest
    container_name: server_postgres_kc
    restart: always
    security_opt:
      - no-new-privileges:true
    networks:
      - ntw_development
    environment:
      - TZ=$TZ
      - POSTGRES_DB=$KEYCLOAK_DATABASE_NAME
      - POSTGRES_USER=$KEYCLOAK_DATABASE_USERNAME
      - POSTGRES_PASSWORD=$KEYCLOAK_DATABASE_PASSWORD
      - PGDATA=/var/lib/postgresql/data
    volumes:
      - pgdata-kc:/var/lib/postgresql/data
    healthcheck:
      test: "exit 0"
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=ntw_development"
      - "traefik.tcp.routers.postgres-kc.entrypoints=postgres"
      - "traefik.tcp.routers.postgres-kc.rule=HostSNI(`keycloak.${DOMAIN_DEVELOPMENT_POSTGRES}`)"
      - "traefik.tcp.routers.postgres-kc.tls=true"
      - "traefik.tcp.routers.postgres-kc.tls.passthrough=false"
      - "traefik.tcp.services.postgres-kc.loadbalancer.server.port=5432"
  postgres-lr:
    image: postgres:latest
    container_name: server_postgres_learning
    restart: always
    security_opt:
      - no-new-privileges:true
    networks:
      - ntw_development
    environment:
      - TZ=$TZ
      - POSTGRES_DB=$LEARNING_DATABASE_NAME
      - POSTGRES_USER=$LEARNING_DATABASE_USERNAME
      - POSTGRES_PASSWORD=$LEARNING_DATABASE_PASSWORD
      - PGDATA=/var/lib/postgresql/data
    volumes:
      - pgdata-kc:/var/lib/postgresql/data
    healthcheck:
      test: "exit 0"
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=ntw_development"
      - "traefik.tcp.routers.postgres-lr.entrypoints=postgres"
      - "traefik.tcp.routers.postgres-lr.rule=HostSNI(`learning.${DOMAIN_DEVELOPMENT_POSTGRES}`)"
      - "traefik.tcp.routers.postgres-lr.tls=true"
      - "traefik.tcp.routers.postgres-lr.tls.passthrough=false"
      - "traefik.tcp.services.postgres-lr.loadbalancer.server.port=5432"
  mysql-lr:
    image: mysql:8.0.27
    container_name: server_mysql_learning
    restart: always
    security_opt:
      - no-new-privileges:true
    networks:
      - ntw_development
    environment:
      MYSQL_USER: $LEARNING_DATABASE_USERNAME
      MYSQL_PASSWORD: $LEARNING_DATABASE_PASSWORD
      MYSQL_DATABASE: $LEARNING_DATABASE_NAME
      MYSQL_ROOT_PASSWORD: $LEARNING_DATABASE_ROOT_PASSWORD
    volumes:
      - keycloak-data:/var/lib/mysql
    healthcheck:
      test:
        - CMD
        - mysql
        - -e
        - select 1
      interval: 10s
      start_period: 20s
      timeout: 5s
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=ntw_development"
      - "traefik.tcp.routers.mysql-lr.entrypoints=mysql"
      - "traefik.tcp.routers.mysql-lr.rule=HostSNI(`learning.${DOMAIN_DEVELOPMENT_MYSQL}`)"
      - "traefik.tcp.routers.mysql-lr.tls=true"
      - "traefik.tcp.routers.mysql-lr.tls.passthrough=false"
      - "traefik.tcp.services.mysql-lr.loadbalancer.server.port=3306"

#  keycloak:
#    image: quay.io/keycloak/keycloak:latest
#    command: start
#    restart: unless-stopped
#    environment:
#
#    depends_on:
#      - postgres-kc
#    networks:
#      - keycloak-and-mysql-network

#   grafana:
#     image: grafana/grafana:latest
#     container_name: grafana
#     security_opt:
#       - no-new-privileges:true
#     restart: unless-stopped
#     networks:
#       - default
#     ports:
#       - "3000:3000"
#     user: $PUID
#     volumes:
#       - $DOCKERDIR/appdata/grafana:/var/lib/grafana
#     environment:
#       GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel,grafana-piechart-panel"

